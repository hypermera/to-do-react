{"version":3,"sources":["context.js","components/Input.js","components/List.js","components/ListCover.js","App.js","serviceWorker.js","index.js"],"names":["TodoContext","React","createContext","reducer","state","action","type","todos","filter","todo","payload","id","TodoProvider","dispatch","setState","Provider","value","this","props","children","Component","TodoConsumer","Consumer","uniqid","require","Input","inputChange","e","target","addTodo","preventDefault","newTODO","console","log","className","onSubmit","bind","placeholder","aria-label","aria-describedby","name","onChange","List","DeleteTodo","job","onClick","style","ListCover","class","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84d27a36.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n\r\n\r\nconst TodoContext = React.createContext()\r\n\r\n//Reducer (state,action) dispatch çağırıyor\r\nconst reducer =(state,action) => {\r\n\r\n    switch(action.type){\r\n        case \"DELETE_TODO\":\r\n            return {\r\n                ...state,\r\n                todos:state.todos.filter(todo => action.payload !== todo.id)\r\n            }\r\n        case \"ADD_TODO\":\r\n            return {\r\n                ...state,\r\n                todos:[...state.todos,action.payload]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//provider sağlayıcı\r\nexport class TodoProvider extends Component {\r\n    state = {\r\n            todos : [\r\n                {\r\n                id : 1,\r\n                todo : \"REACT\"\r\n            },\r\n                {\r\n                id : 2,\r\n                todo : \"FİREBASE\"\r\n            }\r\n        ],\r\n        dispatch : action => {\r\n            this.setState(state => reducer(state,action))\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <TodoContext.Provider value={this.state}>\r\n            {//app.js\r\n            }\r\n            {this.props.children}\r\n            </TodoContext.Provider>\r\n        )\r\n    }\r\n}\r\n//consumer tüketici\r\n\r\nconst TodoConsumer = TodoContext.Consumer;\r\n\r\nexport default TodoConsumer;","import React, { Component } from 'react'\r\nimport TodoConsumer from '../context'\r\nvar uniqid = require('uniqid');\r\n\r\nexport default class Input extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            id :\"\",\r\n            todo : \"\"\r\n        }\r\n        \r\n    }\r\n    inputChange = (e) => {\r\n        const value = e.target.value\r\n        this.setState({\r\n            todo : value\r\n        })\r\n       \r\n    }\r\n    addTodo = (dispatch,e) => {\r\n        e.preventDefault();\r\n        \r\n        const {todo} = this.state\r\n\r\n        const newTODO = {\r\n            id:uniqid(),\r\n            todo:todo\r\n        }\r\n        console.log(newTODO)\r\n        dispatch({type: \"ADD_TODO\",payload:newTODO})\r\n    }\r\n    render() {\r\n        return ( \r\n            <TodoConsumer>\r\n                {\r\n                    value => {\r\n                        const{dispatch} = value\r\n                        return (\r\n                            \r\n                            <div className=\"col-12 mt-5\">\r\n                                <form onSubmit = {this.addTodo.bind(this,dispatch)}>\r\n                                    <div className=\"input-group mb-3\">\r\n                                            <input  \r\n                                            className=\"form-control\" \r\n                                            placeholder=\"Add TO-DO\" \r\n                                            aria-label=\"Add TO-DO\" \r\n                                            aria-describedby=\"button-submit\"\r\n                                            name=\"todo\" \r\n                                            type=\"text\"\r\n                                            value= {this.state.todo}\r\n                                            onChange = {this.inputChange}     \r\n                                            />\r\n                                        <div className=\"input-group-append\">\r\n                                            <input  \r\n                                            className=\"btn btn-dark\" \r\n                                            name=\"submit\"\r\n                                            type=\"submit\"  \r\n                                            id=\"button-submit\"\r\n                                                                    \r\n                                            />\r\n                                        </div> \r\n                                        \r\n                                    </div>\r\n                                </form>\r\n                                \r\n                            </div>\r\n                        )\r\n                                    }\r\n                                }\r\n                            </TodoConsumer>\r\n                        )\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n       \r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport TodoConsumer from '../context'\r\nexport default class List extends Component {\r\n    DeleteTodo = (dispatch,e) => {\r\n        const {id} = this.props\r\n        dispatch({type :'DELETE_TODO' ,payload : id})\r\n    }\r\n    render() {\r\n  \r\n        return(\r\n            <TodoConsumer>\r\n                {\r\n                    value =>{\r\n                        const{dispatch} = value;\r\n                        return (\r\n                            <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                                <div>\r\n                                    {this.props.job}\r\n                                </div>\r\n                                \r\n                                <div>\r\n                                    <i \r\n                                        className=\"fas fa-check fa-2x\"  \r\n                                        onClick= {this.DeleteTodo.bind(this,dispatch)}\r\n                                        style ={{\"cursor\" : \"pointer\"}}>\r\n                                    </i>\r\n                                    <i \r\n                                        className=\"fas fa-times fa-2x ml-3\" \r\n                                        onClick= {this.DeleteTodo.bind(this,dispatch)} \r\n                                        style ={{\"cursor\" : \"pointer\"}}>   \r\n                                    </i> \r\n                                </div>\r\n                               \r\n                            </li>\r\n                            )\r\n                    }\r\n                }\r\n            </TodoConsumer>\r\n            )\r\n            \r\n\r\n\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport TodoConsumer from '../context'\r\nimport List from './List'\r\nexport default class ListCover extends Component {\r\n    render() {\r\n        return (\r\n            <TodoConsumer>\r\n                {\r\n                    value => {\r\n                        const {todos} = value;\r\n                        \r\n                            return (\r\n                                <div className=\"col-12\">\r\n                                    <hr/>\r\n                                    <ul class=\"list-group\">\r\n                                    {todos.map(todo => {\r\n                                    return ( \r\n                                        <List \r\n                                        key = {todo.id} \r\n                                        job = {todo.todo}\r\n                                        id = {todo.id}\r\n                                        />\r\n                                        )}\r\n                                    )}\r\n                                    </ul>\r\n                                </div>\r\n                                    )\r\n                    }\r\n                }\r\n            </TodoConsumer>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport Input from './components/Input'\nimport ListCover from './components/ListCover';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Input/>\n        <ListCover/>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { TodoProvider } from './context';\n\nReactDOM.render(\n<TodoProvider>\n<App />\n</TodoProvider>\n\n\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}